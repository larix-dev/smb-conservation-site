# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  isAdmin: Boolean
}

type Announcement {
  id: ID!
  text: String
  colour: String
  active: Boolean
}

input AnnouncementWhereUniqueInput {
  id: ID
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IDFilter
  text: StringFilter
  colour: StringFilter
  active: BooleanFilter
}

input AnnouncementOrderByInput {
  id: OrderDirection
  text: OrderDirection
  colour: OrderDirection
  active: OrderDirection
}

input AnnouncementUpdateInput {
  text: String
  colour: String
  active: Boolean
}

input AnnouncementUpdateArgs {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateInput!
}

input AnnouncementCreateInput {
  text: String
  colour: String
  active: Boolean
}

type About {
  id: ID!
  content: About_content_Document
}

type About_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutWhereUniqueInput {
  id: ID
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
}

input AboutOrderByInput {
  id: OrderDirection
}

input AboutUpdateInput {
  content: JSON
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput! = {id: 1}
  data: AboutUpdateInput!
}

input AboutCreateInput {
  content: JSON
}

type Burial {
  id: ID!
  image: ImageFieldOutput
  content: Burial_content_Document
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Burial_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BurialWhereUniqueInput {
  id: ID
}

input BurialWhereInput {
  AND: [BurialWhereInput!]
  OR: [BurialWhereInput!]
  NOT: [BurialWhereInput!]
  id: IDFilter
}

input BurialOrderByInput {
  id: OrderDirection
}

input BurialUpdateInput {
  image: ImageFieldInput
  content: JSON
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input BurialUpdateArgs {
  where: BurialWhereUniqueInput! = {id: 1}
  data: BurialUpdateInput!
}

input BurialCreateInput {
  image: ImageFieldInput
  content: JSON
}

type Feedback {
  id: ID!
  image: ImageFieldOutput
  content: Feedback_content_Document
}

type Feedback_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FeedbackWhereUniqueInput {
  id: ID
}

input FeedbackWhereInput {
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  id: IDFilter
}

input FeedbackOrderByInput {
  id: OrderDirection
}

input FeedbackUpdateInput {
  image: ImageFieldInput
  content: JSON
}

input FeedbackUpdateArgs {
  where: FeedbackWhereUniqueInput! = {id: 1}
  data: FeedbackUpdateInput!
}

input FeedbackCreateInput {
  image: ImageFieldInput
  content: JSON
}

type Footer {
  id: ID!
  address: String
  phone: String
  instagramHandle: String
  facebookHandle: String
}

input FooterWhereUniqueInput {
  id: ID
}

input FooterWhereInput {
  AND: [FooterWhereInput!]
  OR: [FooterWhereInput!]
  NOT: [FooterWhereInput!]
  id: IDFilter
  address: StringFilter
  phone: StringFilter
  instagramHandle: StringFilter
  facebookHandle: StringFilter
}

input FooterOrderByInput {
  id: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  instagramHandle: OrderDirection
  facebookHandle: OrderDirection
}

input FooterUpdateInput {
  address: String
  phone: String
  instagramHandle: String
  facebookHandle: String
}

input FooterUpdateArgs {
  where: FooterWhereUniqueInput! = {id: 1}
  data: FooterUpdateInput!
}

input FooterCreateInput {
  address: String
  phone: String
  instagramHandle: String
  facebookHandle: String
}

type GalleryTag {
  id: ID!
  tagName: String
}

input GalleryTagWhereUniqueInput {
  id: ID
}

input GalleryTagWhereInput {
  AND: [GalleryTagWhereInput!]
  OR: [GalleryTagWhereInput!]
  NOT: [GalleryTagWhereInput!]
  id: IDFilter
  tagName: StringFilter
}

input GalleryTagOrderByInput {
  id: OrderDirection
  tagName: OrderDirection
}

input GalleryTagUpdateInput {
  tagName: String
}

input GalleryTagUpdateArgs {
  where: GalleryTagWhereUniqueInput!
  data: GalleryTagUpdateInput!
}

input GalleryTagCreateInput {
  tagName: String
}

type GalleryImage {
  id: ID!
  image: ImageFieldOutput
  caption: String
  author: String
  dateTaken: CalendarDay
  tags(where: GalleryTagWhereInput! = {}, orderBy: [GalleryTagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryTagWhereUniqueInput): [GalleryTag!]
  tagsCount(where: GalleryTagWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input GalleryImageWhereUniqueInput {
  id: ID
}

input GalleryImageWhereInput {
  AND: [GalleryImageWhereInput!]
  OR: [GalleryImageWhereInput!]
  NOT: [GalleryImageWhereInput!]
  id: IDFilter
  caption: StringFilter
  author: StringFilter
  dateTaken: CalendarDayFilter
  tags: GalleryTagManyRelationFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input GalleryTagManyRelationFilter {
  every: GalleryTagWhereInput
  some: GalleryTagWhereInput
  none: GalleryTagWhereInput
}

input GalleryImageOrderByInput {
  id: OrderDirection
  caption: OrderDirection
  author: OrderDirection
  dateTaken: OrderDirection
}

input GalleryImageUpdateInput {
  image: ImageFieldInput
  caption: String
  author: String
  dateTaken: CalendarDay
  tags: GalleryTagRelateToManyForUpdateInput
}

input GalleryTagRelateToManyForUpdateInput {
  disconnect: [GalleryTagWhereUniqueInput!]
  set: [GalleryTagWhereUniqueInput!]
  create: [GalleryTagCreateInput!]
  connect: [GalleryTagWhereUniqueInput!]
}

input GalleryImageUpdateArgs {
  where: GalleryImageWhereUniqueInput!
  data: GalleryImageUpdateInput!
}

input GalleryImageCreateInput {
  image: ImageFieldInput
  caption: String
  author: String
  dateTaken: CalendarDay
  tags: GalleryTagRelateToManyForCreateInput
}

input GalleryTagRelateToManyForCreateInput {
  create: [GalleryTagCreateInput!]
  connect: [GalleryTagWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAnnouncement(data: AnnouncementCreateInput!): Announcement
  createAnnouncements(data: [AnnouncementCreateInput!]!): [Announcement]
  updateAnnouncement(where: AnnouncementWhereUniqueInput!, data: AnnouncementUpdateInput!): Announcement
  updateAnnouncements(data: [AnnouncementUpdateArgs!]!): [Announcement]
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncements(where: [AnnouncementWhereUniqueInput!]!): [Announcement]
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput! = {id: 1}, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput! = {id: 1}): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createBurial(data: BurialCreateInput!): Burial
  createBurials(data: [BurialCreateInput!]!): [Burial]
  updateBurial(where: BurialWhereUniqueInput! = {id: 1}, data: BurialUpdateInput!): Burial
  updateBurials(data: [BurialUpdateArgs!]!): [Burial]
  deleteBurial(where: BurialWhereUniqueInput! = {id: 1}): Burial
  deleteBurials(where: [BurialWhereUniqueInput!]!): [Burial]
  createFeedback(data: FeedbackCreateInput!): Feedback
  createFeedbacks(data: [FeedbackCreateInput!]!): [Feedback]
  updateFeedback(where: FeedbackWhereUniqueInput! = {id: 1}, data: FeedbackUpdateInput!): Feedback
  updateFeedbacks(data: [FeedbackUpdateArgs!]!): [Feedback]
  deleteFeedback(where: FeedbackWhereUniqueInput! = {id: 1}): Feedback
  deleteFeedbacks(where: [FeedbackWhereUniqueInput!]!): [Feedback]
  createFooter(data: FooterCreateInput!): Footer
  createFooters(data: [FooterCreateInput!]!): [Footer]
  updateFooter(where: FooterWhereUniqueInput! = {id: 1}, data: FooterUpdateInput!): Footer
  updateFooters(data: [FooterUpdateArgs!]!): [Footer]
  deleteFooter(where: FooterWhereUniqueInput! = {id: 1}): Footer
  deleteFooters(where: [FooterWhereUniqueInput!]!): [Footer]
  createGalleryTag(data: GalleryTagCreateInput!): GalleryTag
  createGalleryTags(data: [GalleryTagCreateInput!]!): [GalleryTag]
  updateGalleryTag(where: GalleryTagWhereUniqueInput!, data: GalleryTagUpdateInput!): GalleryTag
  updateGalleryTags(data: [GalleryTagUpdateArgs!]!): [GalleryTag]
  deleteGalleryTag(where: GalleryTagWhereUniqueInput!): GalleryTag
  deleteGalleryTags(where: [GalleryTagWhereUniqueInput!]!): [GalleryTag]
  createGalleryImage(data: GalleryImageCreateInput!): GalleryImage
  createGalleryImages(data: [GalleryImageCreateInput!]!): [GalleryImage]
  updateGalleryImage(where: GalleryImageWhereUniqueInput!, data: GalleryImageUpdateInput!): GalleryImage
  updateGalleryImages(data: [GalleryImageUpdateArgs!]!): [GalleryImage]
  deleteGalleryImage(where: GalleryImageWhereUniqueInput!): GalleryImage
  deleteGalleryImages(where: [GalleryImageWhereUniqueInput!]!): [GalleryImage]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  announcements(where: AnnouncementWhereInput! = {}, orderBy: [AnnouncementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnnouncementWhereUniqueInput): [Announcement!]
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcementsCount(where: AnnouncementWhereInput! = {}): Int
  abouts(where: AboutWhereInput! = {id: {equals: 1}}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutWhereUniqueInput): [About!]
  about(where: AboutWhereUniqueInput! = {id: 1}): About
  aboutsCount(where: AboutWhereInput! = {id: {equals: 1}}): Int
  burials(where: BurialWhereInput! = {id: {equals: 1}}, orderBy: [BurialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BurialWhereUniqueInput): [Burial!]
  burial(where: BurialWhereUniqueInput! = {id: 1}): Burial
  burialsCount(where: BurialWhereInput! = {id: {equals: 1}}): Int
  feedbacks(where: FeedbackWhereInput! = {id: {equals: 1}}, orderBy: [FeedbackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeedbackWhereUniqueInput): [Feedback!]
  feedback(where: FeedbackWhereUniqueInput! = {id: 1}): Feedback
  feedbacksCount(where: FeedbackWhereInput! = {id: {equals: 1}}): Int
  footers(where: FooterWhereInput! = {id: {equals: 1}}, orderBy: [FooterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FooterWhereUniqueInput): [Footer!]
  footer(where: FooterWhereUniqueInput! = {id: 1}): Footer
  footersCount(where: FooterWhereInput! = {id: {equals: 1}}): Int
  galleryTags(where: GalleryTagWhereInput! = {}, orderBy: [GalleryTagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryTagWhereUniqueInput): [GalleryTag!]
  galleryTag(where: GalleryTagWhereUniqueInput!): GalleryTag
  galleryTagsCount(where: GalleryTagWhereInput! = {}): Int
  galleryImages(where: GalleryImageWhereInput! = {}, orderBy: [GalleryImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryImageWhereUniqueInput): [GalleryImage!]
  galleryImage(where: GalleryImageWhereUniqueInput!): GalleryImage
  galleryImagesCount(where: GalleryImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
